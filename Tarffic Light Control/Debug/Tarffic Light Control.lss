
Tarffic Light Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000442  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000442  000004d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006c  0080006c  000004e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b3d  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a2  00000000  00000000  00001155  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000840  00000000  00000000  000019f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  00002238  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047f  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f3  00000000  00000000  0000287f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002c72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_10>
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 39 01 	call	0x272	; 0x272 <main>
  8a:	0c 94 1f 02 	jmp	0x43e	; 0x43e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ctc_isr>:
		
	}
	else if (Red==ON && Seconds>5){ PORTB = Red_Led; }
}

static void ctc_isr(void){
  92:	cf 93       	push	r28
	
	static uint8_t count = 0;
	
		count++;
  94:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  98:	8f 5f       	subi	r24, 0xFF	; 255
  9a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		if(count == 125)   // for 1 Second
  9e:	8d 37       	cpi	r24, 0x7D	; 125
  a0:	71 f4       	brne	.+28     	; 0xbe <ctc_isr+0x2c>
		{   
			
			if (Seconds==0) {Seconds=11; }
  a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Seconds>
  a6:	81 11       	cpse	r24, r1
  a8:	03 c0       	rjmp	.+6      	; 0xb0 <ctc_isr+0x1e>
  aa:	8b e0       	ldi	r24, 0x0B	; 11
  ac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Seconds>
			Seconds--;
  b0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Seconds>
  b4:	81 50       	subi	r24, 0x01	; 1
  b6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Seconds>
			count =0;
  ba:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
			
		}
		SEVEN_SEG_write(0,Seconds/10);
  be:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <Seconds>
  c2:	cd ec       	ldi	r28, 0xCD	; 205
  c4:	6c 9f       	mul	r22, r28
  c6:	61 2d       	mov	r22, r1
  c8:	11 24       	eor	r1, r1
  ca:	66 95       	lsr	r22
  cc:	66 95       	lsr	r22
  ce:	66 95       	lsr	r22
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 82 01 	call	0x304	; 0x304 <SEVEN_SEG_write>
		SEVEN_SEG_write(1,Seconds%10);
  d6:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <Seconds>
  da:	6c 9f       	mul	r22, r28
  dc:	c1 2d       	mov	r28, r1
  de:	11 24       	eor	r1, r1
  e0:	c6 95       	lsr	r28
  e2:	c6 95       	lsr	r28
  e4:	c6 95       	lsr	r28
  e6:	cc 0f       	add	r28, r28
  e8:	8c 2f       	mov	r24, r28
  ea:	88 0f       	add	r24, r24
  ec:	88 0f       	add	r24, r24
  ee:	c8 0f       	add	r28, r24
  f0:	6c 1b       	sub	r22, r28
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 82 01 	call	0x304	; 0x304 <SEVEN_SEG_write>
		if(Status == Pedestrian_Mode)
  f8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Status>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	e9 f4       	brne	.+58     	; 0x13a <ctc_isr+0xa8>
		{
			
			SEVEN_SEG_write(2,Seconds/10);
 100:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <Seconds>
 104:	cd ec       	ldi	r28, 0xCD	; 205
 106:	6c 9f       	mul	r22, r28
 108:	61 2d       	mov	r22, r1
 10a:	11 24       	eor	r1, r1
 10c:	66 95       	lsr	r22
 10e:	66 95       	lsr	r22
 110:	66 95       	lsr	r22
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	0e 94 82 01 	call	0x304	; 0x304 <SEVEN_SEG_write>
			SEVEN_SEG_write(3,Seconds%10);
 118:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <Seconds>
 11c:	6c 9f       	mul	r22, r28
 11e:	c1 2d       	mov	r28, r1
 120:	11 24       	eor	r1, r1
 122:	c6 95       	lsr	r28
 124:	c6 95       	lsr	r28
 126:	c6 95       	lsr	r28
 128:	cc 0f       	add	r28, r28
 12a:	8c 2f       	mov	r24, r28
 12c:	88 0f       	add	r24, r24
 12e:	88 0f       	add	r24, r24
 130:	c8 0f       	add	r28, r24
 132:	6c 1b       	sub	r22, r28
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 82 01 	call	0x304	; 0x304 <SEVEN_SEG_write>
			
		}
}
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <Pedestrian_Mode_Event>:

void Pedestrian_Mode_Event(void)
{
	uint8_t flag=0;
	
	if (READBIT(PORTB,Cars_Red_Led)==ON)
 13e:	c2 9b       	sbis	0x18, 2	; 24
 140:	1f c0       	rjmp	.+62     	; 0x180 <Pedestrian_Mode_Event+0x42>
	{
		SETBIT(PORTB,Pedestrian_Green_Led);
 142:	88 b3       	in	r24, 0x18	; 24
 144:	88 60       	ori	r24, 0x08	; 8
 146:	88 bb       	out	0x18, r24	; 24
		SETBIT(PORTB,Cars_Red_Led);
 148:	88 b3       	in	r24, 0x18	; 24
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	88 bb       	out	0x18, r24	; 24
 14e:	18 c0       	rjmp	.+48     	; 0x180 <Pedestrian_Mode_Event+0x42>
	}
	
	while (Seconds<=5 && flag==0)
	{
		SETBIT(PORTB,Pedestrian_Red_Led);
 150:	88 b3       	in	r24, 0x18	; 24
 152:	80 62       	ori	r24, 0x20	; 32
 154:	88 bb       	out	0x18, r24	; 24
		
		TOGBIT(PORTB,Cars_Yellow_Led);
 156:	98 b3       	in	r25, 0x18	; 24
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	89 27       	eor	r24, r25
 15c:	88 bb       	out	0x18, r24	; 24
		TOGBIT(PORTB,Pedestrian_Yellow_Led);
 15e:	98 b3       	in	r25, 0x18	; 24
 160:	80 e1       	ldi	r24, 0x10	; 16
 162:	89 27       	eor	r24, r25
 164:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	8f ea       	ldi	r24, 0xAF	; 175
 168:	94 e0       	ldi	r25, 0x04	; 4
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <Pedestrian_Mode_Event+0x2c>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <Pedestrian_Mode_Event+0x32>
 170:	00 00       	nop
		_delay_us(300);
		if (Seconds==0){ Seconds=10; }
 172:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Seconds>
 176:	81 11       	cpse	r24, r1
 178:	03 c0       	rjmp	.+6      	; 0x180 <Pedestrian_Mode_Event+0x42>
 17a:	8a e0       	ldi	r24, 0x0A	; 10
 17c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Seconds>
	{
		SETBIT(PORTB,Pedestrian_Green_Led);
		SETBIT(PORTB,Cars_Red_Led);
	}
	
	while (Seconds<=5 && flag==0)
 180:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Seconds>
 184:	86 30       	cpi	r24, 0x06	; 6
 186:	20 f3       	brcs	.-56     	; 0x150 <Pedestrian_Mode_Event+0x12>
		_delay_us(300);
		if (Seconds==0){ Seconds=10; }
	}
	
	
	if (Seconds > 5)
 188:	86 30       	cpi	r24, 0x06	; 6
 18a:	20 f0       	brcs	.+8      	; 0x194 <Pedestrian_Mode_Event+0x56>
	{
		PORTB = 12;
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	88 bb       	out	0x18, r24	; 24
		flag=1;
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	28 c0       	rjmp	.+80     	; 0x1e4 <Pedestrian_Mode_Event+0xa6>
}


void Pedestrian_Mode_Event(void)
{
	uint8_t flag=0;
 194:	20 e0       	ldi	r18, 0x00	; 0
 196:	26 c0       	rjmp	.+76     	; 0x1e4 <Pedestrian_Mode_Event+0xa6>
		PORTB = 12;
		flag=1;
	}
	while (Seconds<=5 && flag==1)
	{
		CLRBIT(PORTB,Cars_Red_Led);
 198:	88 b3       	in	r24, 0x18	; 24
 19a:	8b 7f       	andi	r24, 0xFB	; 251
 19c:	88 bb       	out	0x18, r24	; 24
		
		TOGBIT(PORTB,Cars_Yellow_Led);
 19e:	98 b3       	in	r25, 0x18	; 24
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	89 27       	eor	r24, r25
 1a4:	88 bb       	out	0x18, r24	; 24
		TOGBIT(PORTB,Pedestrian_Yellow_Led);
 1a6:	98 b3       	in	r25, 0x18	; 24
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	89 27       	eor	r24, r25
 1ac:	88 bb       	out	0x18, r24	; 24
		SETBIT(PORTB,Pedestrian_Green_Led);
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	88 bb       	out	0x18, r24	; 24
 1b4:	8f ea       	ldi	r24, 0xAF	; 175
 1b6:	94 e0       	ldi	r25, 0x04	; 4
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <Pedestrian_Mode_Event+0x7a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <Pedestrian_Mode_Event+0x80>
 1be:	00 00       	nop
		_delay_us(300);
		
		if(Seconds==0){
 1c0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Seconds>
 1c4:	81 11       	cpse	r24, r1
 1c6:	0e c0       	rjmp	.+28     	; 0x1e4 <Pedestrian_Mode_Event+0xa6>
			PORTB=OFF;
 1c8:	18 ba       	out	0x18, r1	; 24
			pedestrian_int=1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <pedestrian_int>
			flag=0;
			Seconds=10;
 1d0:	9a e0       	ldi	r25, 0x0A	; 10
 1d2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <Seconds>
			Red=OFF;
 1d6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Red>
			Green=ON;
 1da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			Status = Normal_Mode;
 1de:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Status>
		_delay_us(300);
		
		if(Seconds==0){
			PORTB=OFF;
			pedestrian_int=1;
			flag=0;
 1e2:	20 e0       	ldi	r18, 0x00	; 0
	if (Seconds > 5)
	{
		PORTB = 12;
		flag=1;
	}
	while (Seconds<=5 && flag==1)
 1e4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Seconds>
 1e8:	86 30       	cpi	r24, 0x06	; 6
 1ea:	10 f4       	brcc	.+4      	; 0x1f0 <Pedestrian_Mode_Event+0xb2>
 1ec:	21 30       	cpi	r18, 0x01	; 1
 1ee:	a1 f2       	breq	.-88     	; 0x198 <Pedestrian_Mode_Event+0x5a>
 1f0:	08 95       	ret

000001f2 <Normal_Mode_Event>:
}


void Normal_Mode_Event(void)
{
	if ((Green ==ON) && (Seconds>5))
 1f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	99 f4       	brne	.+38     	; 0x220 <Normal_Mode_Event+0x2e>
 1fa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Seconds>
 1fe:	86 30       	cpi	r24, 0x06	; 6
 200:	78 f0       	brcs	.+30     	; 0x220 <Normal_Mode_Event+0x2e>
	{
		PORTB = Green_Led;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	88 bb       	out	0x18, r24	; 24
		while(pedestrian_int!=0 && Seconds>5){ SETBIT(PORTB,Pedestrian_Red_Led); }
 206:	03 c0       	rjmp	.+6      	; 0x20e <Normal_Mode_Event+0x1c>
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	80 62       	ori	r24, 0x20	; 32
 20c:	88 bb       	out	0x18, r24	; 24
 20e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <pedestrian_int>
 212:	88 23       	and	r24, r24
 214:	69 f1       	breq	.+90     	; 0x270 <Normal_Mode_Event+0x7e>
 216:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Seconds>
 21a:	86 30       	cpi	r24, 0x06	; 6
 21c:	a8 f7       	brcc	.-22     	; 0x208 <Normal_Mode_Event+0x16>
 21e:	08 95       	ret
	}
	else if ((Seconds <= 5))
 220:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Seconds>
 224:	86 30       	cpi	r24, 0x06	; 6
 226:	e0 f4       	brcc	.+56     	; 0x260 <Normal_Mode_Event+0x6e>
	{
		PORTB ^= Yellow_Led;
 228:	98 b3       	in	r25, 0x18	; 24
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	89 27       	eor	r24, r25
 22e:	88 bb       	out	0x18, r24	; 24
 230:	8f ea       	ldi	r24, 0xAF	; 175
 232:	94 e0       	ldi	r25, 0x04	; 4
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <Normal_Mode_Event+0x42>
 238:	00 c0       	rjmp	.+0      	; 0x23a <Normal_Mode_Event+0x48>
 23a:	00 00       	nop
		_delay_us(300);
		pedestrian_int=0;
 23c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <pedestrian_int>
		PORTB=OFF;
 240:	18 ba       	out	0x18, r1	; 24
		if (Green==ON)
 242:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	29 f4       	brne	.+10     	; 0x254 <Normal_Mode_Event+0x62>
		{
			Red=ON;
 24a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Red>
			Green=OFF;
 24e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 252:	08 95       	ret
		}
		else{
			Red=OFF;
 254:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Red>
			Green=ON;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 25e:	08 95       	ret
		}
		
	}
	else if (Red==ON && Seconds>5){ PORTB = Red_Led; }
 260:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Red>
 264:	91 30       	cpi	r25, 0x01	; 1
 266:	21 f4       	brne	.+8      	; 0x270 <Normal_Mode_Event+0x7e>
 268:	86 30       	cpi	r24, 0x06	; 6
 26a:	10 f0       	brcs	.+4      	; 0x270 <Normal_Mode_Event+0x7e>
 26c:	84 e0       	ldi	r24, 0x04	; 4
 26e:	88 bb       	out	0x18, r24	; 24
 270:	08 95       	ret

00000272 <main>:
uint8_t Green=ON,Red=OFF;
uint8_t pedestrian_int =0;
int main(void)
{
	
    timer0_ctc_isr = ctc_isr;
 272:	89 e4       	ldi	r24, 0x49	; 73
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <timer0_ctc_isr+0x1>
 27a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <timer0_ctc_isr>
    TIMER0_CTC_init(OC_Value);
 27e:	8c e7       	ldi	r24, 0x7C	; 124
 280:	0e 94 bd 01 	call	0x37a	; 0x37a <TIMER0_CTC_init>
	EXTERNAL_INTERRUPT_init();
 284:	0e 94 aa 01 	call	0x354	; 0x354 <EXTERNAL_INTERRUPT_init>
    SEVEN_SEG_init();
 288:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SEVEN_SEG_init>
	
	
	
	DDRB=0xff;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	87 bb       	out	0x17, r24	; 23
	
    while (1) 
    {
		if(Status!=Pedestrian_Mode)
 290:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Status>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	19 f0       	breq	.+6      	; 0x29e <main+0x2c>
		{
			
			Normal_Mode_Event();
 298:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <Normal_Mode_Event>
 29c:	f9 cf       	rjmp	.-14     	; 0x290 <main+0x1e>
				
		}
		else{
			
				Pedestrian_Mode_Event();
 29e:	0e 94 9f 00 	call	0x13e	; 0x13e <Pedestrian_Mode_Event>
 2a2:	f6 cf       	rjmp	.-20     	; 0x290 <main+0x1e>

000002a4 <__vector_2>:
			
		}
}


ISR(INT1_vect){
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	8f 93       	push	r24
	
	if (Status!=Pedestrian_Mode)
 2b0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Status>
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	b1 f0       	breq	.+44     	; 0x2e4 <__vector_2+0x40>
	{
		if (READBIT(PORTB,Cars_Red_Led)==ON)
 2b8:	c2 9b       	sbis	0x18, 2	; 24
 2ba:	07 c0       	rjmp	.+14     	; 0x2ca <__vector_2+0x26>
		{
			
			Seconds=10;
 2bc:	8a e0       	ldi	r24, 0x0A	; 10
 2be:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Seconds>
			Status=Pedestrian_Mode;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Status>
 2c8:	0d c0       	rjmp	.+26     	; 0x2e4 <__vector_2+0x40>
		}
		else if (READBIT(PORTB,Cars_Green_Led)==ON || Seconds<=5)
 2ca:	c0 99       	sbic	0x18, 0	; 24
 2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <__vector_2+0x32>
 2ce:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Seconds>
 2d2:	86 30       	cpi	r24, 0x06	; 6
 2d4:	38 f4       	brcc	.+14     	; 0x2e4 <__vector_2+0x40>
		{
			
			
			Seconds=5;
 2d6:	85 e0       	ldi	r24, 0x05	; 5
 2d8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Seconds>
			PORTB=OFF;
 2dc:	18 ba       	out	0x18, r1	; 24
			Status=Pedestrian_Mode;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Status>
		}
	}
	
	
}
 2e4:	8f 91       	pop	r24
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <SEVEN_SEG_init>:
#include "SEVEN_SEG.h"

const uint8_t num[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
	
void SEVEN_SEG_init(void){
	INIT_SEVEN_SEG_PINS;
 2f0:	84 b3       	in	r24, 0x14	; 20
 2f2:	8f ef       	ldi	r24, 0xFF	; 255
 2f4:	84 bb       	out	0x14, r24	; 20
	INIT_SEVEN_SEG_En_PINS;
 2f6:	8a b3       	in	r24, 0x1a	; 26
 2f8:	8f 60       	ori	r24, 0x0F	; 15
 2fa:	8a bb       	out	0x1a, r24	; 26
	PORT_DISABLE_ALL_SS ;
 2fc:	8b b3       	in	r24, 0x1b	; 27
 2fe:	80 7f       	andi	r24, 0xF0	; 240
 300:	8b bb       	out	0x1b, r24	; 27
 302:	08 95       	ret

00000304 <SEVEN_SEG_write>:
}
void SEVEN_SEG_write(uint8_t en,uint8_t data_in){ 
	 PORT_DISABLE_ALL_SS; 
 304:	9b b3       	in	r25, 0x1b	; 27
 306:	90 7f       	andi	r25, 0xF0	; 240
 308:	9b bb       	out	0x1b, r25	; 27
	 switch(en){
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	51 f0       	breq	.+20     	; 0x322 <SEVEN_SEG_write+0x1e>
 30e:	28 f0       	brcs	.+10     	; 0x31a <SEVEN_SEG_write+0x16>
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	59 f0       	breq	.+22     	; 0x32a <SEVEN_SEG_write+0x26>
 314:	83 30       	cpi	r24, 0x03	; 3
 316:	69 f0       	breq	.+26     	; 0x332 <SEVEN_SEG_write+0x2e>
 318:	0f c0       	rjmp	.+30     	; 0x338 <SEVEN_SEG_write+0x34>
		 case 0:
		 EN0;break;
 31a:	8b b3       	in	r24, 0x1b	; 27
 31c:	81 60       	ori	r24, 0x01	; 1
 31e:	8b bb       	out	0x1b, r24	; 27
 320:	0b c0       	rjmp	.+22     	; 0x338 <SEVEN_SEG_write+0x34>
		 case 1:
		 EN1;break;
 322:	8b b3       	in	r24, 0x1b	; 27
 324:	82 60       	ori	r24, 0x02	; 2
 326:	8b bb       	out	0x1b, r24	; 27
 328:	07 c0       	rjmp	.+14     	; 0x338 <SEVEN_SEG_write+0x34>
		 case 2:
		 EN2;break;
 32a:	8b b3       	in	r24, 0x1b	; 27
 32c:	84 60       	ori	r24, 0x04	; 4
 32e:	8b bb       	out	0x1b, r24	; 27
 330:	03 c0       	rjmp	.+6      	; 0x338 <SEVEN_SEG_write+0x34>
		 case 3:
		 EN3;break;
 332:	8b b3       	in	r24, 0x1b	; 27
 334:	88 60       	ori	r24, 0x08	; 8
 336:	8b bb       	out	0x1b, r24	; 27
		 
		
	 }
	 
	 PORT_WRITE = ~ num[data_in];
 338:	e6 2f       	mov	r30, r22
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	ee 59       	subi	r30, 0x9E	; 158
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	80 81       	ld	r24, Z
 342:	80 95       	com	r24
 344:	85 bb       	out	0x15, r24	; 21
 346:	8f ec       	ldi	r24, 0xCF	; 207
 348:	97 e0       	ldi	r25, 0x07	; 7
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <SEVEN_SEG_write+0x46>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <SEVEN_SEG_write+0x4c>
 350:	00 00       	nop
 352:	08 95       	ret

00000354 <EXTERNAL_INTERRUPT_init>:
 */ 
#include "EXTERNAL_INTERRUPT.h"

void EXTERNAL_INTERRUPT_init(void)
{
	CLRBIT(DDRD,3); 
 354:	81 b3       	in	r24, 0x11	; 17
 356:	87 7f       	andi	r24, 0xF7	; 247
 358:	81 bb       	out	0x11, r24	; 17
	SETBIT(PORTD,3); // pull up
 35a:	82 b3       	in	r24, 0x12	; 18
 35c:	88 60       	ori	r24, 0x08	; 8
 35e:	82 bb       	out	0x12, r24	; 18
	
	SETBIT(MCUCR,3); // falling edge
 360:	85 b7       	in	r24, 0x35	; 53
 362:	88 60       	ori	r24, 0x08	; 8
 364:	85 bf       	out	0x35, r24	; 53
	SETBIT(MCUCR,2); 
 366:	85 b7       	in	r24, 0x35	; 53
 368:	84 60       	ori	r24, 0x04	; 4
 36a:	85 bf       	out	0x35, r24	; 53
	
	SETBIT(GICR,7);
 36c:	8b b7       	in	r24, 0x3b	; 59
 36e:	80 68       	ori	r24, 0x80	; 128
 370:	8b bf       	out	0x3b, r24	; 59
	
	SETBIT(SREG,7); //Enable global int
 372:	8f b7       	in	r24, 0x3f	; 63
 374:	80 68       	ori	r24, 0x80	; 128
 376:	8f bf       	out	0x3f, r24	; 63
 378:	08 95       	ret

0000037a <TIMER0_CTC_init>:
	SETBIT(DDRB, 3); 
	SETBIT(TCCR0,CS00); 
	SETBIT(TCCR0,FOC0);
	SETBIT(TCCR0,WGM01); 
	SETBIT(TCCR0,COM00);
	OCR0 = oc;
 37a:	93 b7       	in	r25, 0x33	; 51
 37c:	91 60       	ori	r25, 0x01	; 1
 37e:	93 bf       	out	0x33, r25	; 51
 380:	93 b7       	in	r25, 0x33	; 51
 382:	94 60       	ori	r25, 0x04	; 4
 384:	93 bf       	out	0x33, r25	; 51
 386:	93 b7       	in	r25, 0x33	; 51
 388:	90 68       	ori	r25, 0x80	; 128
 38a:	93 bf       	out	0x33, r25	; 51
 38c:	93 b7       	in	r25, 0x33	; 51
 38e:	98 60       	ori	r25, 0x08	; 8
 390:	93 bf       	out	0x33, r25	; 51
 392:	8c bf       	out	0x3c, r24	; 60
 394:	89 b7       	in	r24, 0x39	; 57
 396:	82 60       	ori	r24, 0x02	; 2
 398:	89 bf       	out	0x39, r24	; 57
 39a:	8f b7       	in	r24, 0x3f	; 63
 39c:	80 68       	ori	r24, 0x80	; 128
 39e:	8f bf       	out	0x3f, r24	; 63
 3a0:	08 95       	ret

000003a2 <__vector_11>:
}

ISR(TIMER0_OVF_vect){
 3a2:	1f 92       	push	r1
 3a4:	0f 92       	push	r0
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	0f 92       	push	r0
 3aa:	11 24       	eor	r1, r1
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	timer0_ovf_isr();
 3c4:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <timer0_ovf_isr>
 3c8:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <timer0_ovf_isr+0x1>
 3cc:	09 95       	icall
}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	7f 91       	pop	r23
 3dc:	6f 91       	pop	r22
 3de:	5f 91       	pop	r21
 3e0:	4f 91       	pop	r20
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <__vector_10>:

ISR(TIMER0_COMP_vect){
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
	timer0_ctc_isr();
 412:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <timer0_ctc_isr>
 416:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <timer0_ctc_isr+0x1>
 41a:	09 95       	icall
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	7f 91       	pop	r23
 42a:	6f 91       	pop	r22
 42c:	5f 91       	pop	r21
 42e:	4f 91       	pop	r20
 430:	3f 91       	pop	r19
 432:	2f 91       	pop	r18
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <_exit>:
 43e:	f8 94       	cli

00000440 <__stop_program>:
 440:	ff cf       	rjmp	.-2      	; 0x440 <__stop_program>
